let Router,UserService,bodyParser;_a13‍.x([["default",()=>_a13‍.o]]);_a13‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_a13‍.w("../services/user.service",[["default",["UserService"],function(v){UserService=v}]]);_a13‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);



const userService = new UserService();

_a13‍.d(Router()
    .get('/', async (req, res) =>{
        try{
            const data = await userService.findAll();

            res.json({data});
        } catch (error) {
            res.status(500).json({message: error.message});
        }
    })
    .get('/:id', async (req,res) =>{
        try{
            const {id} = req.params;

            const data = await userService.findOne(id);

            if(data) res.json({data});
            else res.status(404).json({message:`ID ${id} not found`});
        }catch (error) {
            res.status(500).json({message:error.message});
        }
    })
    // .use(bodyParser.json())
    .post('/', async(req, res) =>{
        try{
            let user = {...req.body};
            _a13‍.g.console.log({...req.body});
            user = await userService.create(user);

            res.status(201).json({user});
        } catch(error) {
            res.status(500).json({message: error.message});
        }
    })
    .use(bodyParser.json())
    .put('/', async(req, res) =>{
        try{
            let user = {...req.body};
            const data = await userService.findOne(user.id);
            if(data){
                user = await userService.update(user);
                res.json({user});
            }else res.status(404).json({message:`ID not foundd`});
        } catch(error) {
            res.status(500).json({message : error.message});
        }
    })
    .delete('/:id', async(req, res) => {
        try{
            const {id} = req.params;
            await userService.delete(id);
            res.sendStatus(204);
        } catch(error) {
            res.status(500).json({message : error.message});
        }
    }));